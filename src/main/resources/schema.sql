-- DROP TABLE

DROP TABLE IF EXISTS MPA CASCADE;
DROP TABLE IF EXISTS GENRE CASCADE;
DROP TABLE IF EXISTS FILM CASCADE;
DROP TABLE IF EXISTS USERS CASCADE;
DROP TABLE IF EXISTS FAVORITE_FILMS CASCADE;
DROP TABLE IF EXISTS FILM_GENRE CASCADE;
DROP TABLE IF EXISTS FAVORITE_FILMS CASCADE;
DROP TABLE IF EXISTS FRIENDS CASCADE;

--

CREATE TABLE IF NOT EXISTS MPA
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name CHARACTER VARYING(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS GENRE
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name CHARACTER VARYING(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS FILM
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         CHARACTER VARYING(255) NOT NULL,
    description  CHARACTER VARYING(255) NOT NULL,
    release_date DATE                   NOT NULL,
    duration     INTEGER                NOT NULL,
    mpa_id       INTEGER                NOT NULL,
    CONSTRAINT mpa_id_fk FOREIGN KEY (mpa_id) REFERENCES MPA (id)
);

CREATE TABLE IF NOT EXISTS USERS
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    CHARACTER VARYING(255) NOT NULL,
    login    CHARACTER VARYING(255) NOT NULL,
    name     CHARACTER VARYING(255),
    birthday DATE
);

CREATE TABLE IF NOT EXISTS FAVORITE_FILMS
(
    film_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    CONSTRAINT favorite_films_pk PRIMARY KEY (film_id, user_id),
    CONSTRAINT favored_film_fk FOREIGN KEY (film_id) REFERENCES FILM (id),
    CONSTRAINT favored_user_fk FOREIGN KEY (user_id) REFERENCES USERS (id)
);

CREATE TABLE IF NOT EXISTS FILM_GENRE
(
    film_id  INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    constraint FILM_GENRE_PK primary key (film_id, genre_id),
    CONSTRAINT fg_film_fk FOREIGN KEY (film_id) REFERENCES FILM (id),
    CONSTRAINT fg_genre_fk FOREIGN KEY (genre_id) REFERENCES GENRE (id)
);

CREATE TABLE IF NOT EXISTS FRIENDS
(
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    approved BOOLEAN default FALSE,
    CONSTRAINT friends_pk PRIMARY KEY (user_id, friend_id),
    CONSTRAINT user_fk FOREIGN KEY (user_id) REFERENCES USERS (id),
    CONSTRAINT friend_fk FOREIGN KEY (friend_id) REFERENCES USERS (id)
);
